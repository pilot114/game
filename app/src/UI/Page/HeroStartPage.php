<?php

namespace Game\UI\Page;

use PhpTui\Term\Event;
use PhpTui\Tui\Extension\Core\Widget\BlockWidget;
use PhpTui\Tui\Extension\Core\Widget\GridWidget;
use PhpTui\Tui\Extension\Core\Widget\List\ListItem;
use PhpTui\Tui\Extension\Core\Widget\List\ListState;
use PhpTui\Tui\Extension\Core\Widget\ListWidget;
use PhpTui\Tui\Extension\Core\Widget\ParagraphWidget;
use PhpTui\Tui\Extension\ImageMagick\Widget\ImageWidget;
use PhpTui\Tui\Model\Direction;
use PhpTui\Tui\Model\Display\Display;
use PhpTui\Tui\Model\HorizontalAlignment;
use PhpTui\Tui\Model\Layout\Constraint;
use PhpTui\Tui\Model\Style;
use PhpTui\Tui\Model\Text\Text;
use PhpTui\Tui\Model\Text\Title;
use PhpTui\Tui\Model\Widget\Borders;
use PhpTui\Tui\Model\Widget\BorderType;

class HeroStartPage implements PageInterface
{
    private string $race = 'human';
    private string $class = 'warrior';
    private string $gender = 'men';

    private array $specialAbilities = [
        '–ú–∞—Å—Ç–µ—Ä —Ç–æ—Ä–≥–∞' => '–†–∞–∑ –≤ —Å—É—Ç–∫–∏ –º–æ–∂–Ω–æ —É–±–µ–¥–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—Ü–∞ –ø—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –ø–æ —Å–µ–±–µ—Å—Ç–æ–π–º–æ—Å—Ç–∏',
        '–ü–∞—É—á—å–µ —á—É—Ç—å—ë' => '–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–±–µ–∂–∞—Ç—å, –µ—Å–ª–∏ –≤—Å—Ç—É–ø–∞–µ—Ç–µ –≤ –±–æ–π —Å–∏–ª—å–Ω–æ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è—â–∏–º –≤–∞—Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º',
        '–ñ–µ–ª–µ–∑–Ω—ã–π –∂–µ–ª—É–¥–æ–∫' => '–ò—Å–ø–æ—Ä—á–µ–Ω–Ω–∞—è –∏ –æ—Ç—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –µ–¥–∞ –Ω–µ –¥–∞—ë—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤',
        '–≠—Ö–æ –ø—Ä–æ—à–ª–æ–≥–æ' => '–í—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å –∏ —Å–ª—ã—à–∞—Ç—å –ø—Ä–∏–∑—Ä–∞–∫–æ–≤',
        '–ö–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä' => '–í—ã –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç–µ –∫ —Å–µ–±–µ —Ä–µ–¥–∫–∏–µ –∏ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–∫ –ø–æ–ª–µ–∑–Ω—ã–º–∏, —Ç–∞–∫ –∏ –æ–ø–∞—Å–Ω—ã–º–∏',
    ];
    private int $specialAbilityIndex = 0;

    private string $description = '<—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —Å–æ–±–∏—Ä–∞–µ–º–æ–µ –ø–æ –≤—Ö–æ–¥–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º>';

    public function __construct()
    {
        $this->specialAbilityIndex = rand(0, 4);
    }

    private function getAbilityName(): string
    {
        return array_keys($this->specialAbilities)[$this->specialAbilityIndex];
    }
    private function getAbilityDescription(): string
    {
        return $this->specialAbilities[$this->getAbilityName()];
    }

    public function handle(Event $event): ?PageInterface
    {
        if ($event instanceof Event\MouseEvent) {
            if ($event->button->name !== 'Left' || $event->kind->name !== 'Down') {
                return null;
            }
            if ($event->column === 1 && $event->row === 14) {
                $this->specialAbilityIndex === 0 ? $this->specialAbilityIndex = 4 : $this->specialAbilityIndex--;
            }
            if ($event->column === 16 && $event->row === 14) {
                $this->specialAbilityIndex === 4 ? $this->specialAbilityIndex = 0 : $this->specialAbilityIndex++;
            }


            $areas = [
                'race_human' => [1,1,34,1],
                'race_lizzard' => [1,2,34,2],
                'race_gnome' => [1,3,34,3],
                'class_warrior' => [1,6,34,6],
                'class_wizard' => [1,7,34,7],
                'gender_men' => [1,10,34,10],
                'gender_women' => [1,11,34,11],
                'start' => [109,38,143,38],
            ];
            foreach ($areas as $type => $area) {
                $inArea = $event->column >= $area[0] && $event->column <= $area[2] && $event->row >= $area[1] && $event->row <= $area[3];
                if ($inArea) {
                    if ($type === 'start') {
                        return new GamePage();
                    }
                    [$key, $value] = explode('_', $type);
                    $this->$key = $value;
                }
            }
        }
        return null;
    }

    private function getPortraitPath(): string
    {
        return __DIR__ . "/../../resources/images/hero/{$this->race}_{$this->gender}_{$this->class}.webp";
    }

    private function getRaceIndex(): int
    {
        return match($this->race) {
            'human' => 0,
            'lizzard' => 1,
            'gnome' => 2,
        };
    }

    private function getClassIndex(): int
    {
        return match($this->class) {
            'warrior' => 0,
            'wizard' => 1,
        };
    }

    private function getGenderIndex(): int
    {
        return match($this->gender) {
            'men' => 0,
            'women' => 1,
        };
    }

    public function render(Display $display): void
    {
        $display->draw(
            GridWidget::default()
            ->direction(Direction::Horizontal)
            ->constraints(
                Constraint::percentage(25),
                Constraint::percentage(50),
                Constraint::percentage(25),
            )
            ->widgets(
                GridWidget::default()
                ->direction(Direction::Vertical)
                ->constraints(
                    Constraint::max(5),
                    Constraint::max(4),
                    Constraint::max(4),
                    Constraint::max(7),
                    Constraint::max(50),
                )
                ->widgets(
                    BlockWidget::default()
                        ->borders(Borders::ALL)
                        ->borderType(BorderType::Rounded)
                        ->titles(Title::fromString('–†–∞—Å–∞'))
                    ->widget(
                        ListWidget::default()
                            ->highlightSymbol('ü°Ü')
                            ->state(new ListState(0, $this->getRaceIndex()))
                            ->items(
                                ListItem::new(Text::fromString(' –ß–µ–ª–æ–≤–µ–∫')),
                                ListItem::new(Text::fromString(' –Ø—â–µ—Ä')),
                                ListItem::new(Text::fromString(' –ì–Ω–æ–º')),
                            )
                    ),
                    BlockWidget::default()
                        ->borders(Borders::ALL)
                        ->borderType(BorderType::Rounded)
                        ->titles(Title::fromString('–ö–ª–∞—Å—Å'))
                        ->widget(
                            ListWidget::default()
                                ->highlightSymbol('ü°Ü')
                                ->state(new ListState(0, $this->getClassIndex()))
                                ->items(
                                    ListItem::new(Text::fromString(' –í–æ–∏–Ω')),
                                    ListItem::new(Text::fromString(' –ú–∞–≥')),
                                )
                        ),
                    BlockWidget::default()
                        ->borders(Borders::ALL)
                        ->borderType(BorderType::Rounded)
                        ->titles(Title::fromString('–ü–æ–ª'))
                        ->widget(
                            ListWidget::default()
                                ->highlightSymbol('ü°Ü')
                                ->state(new ListState(0, $this->getGenderIndex()))
                                ->items(
                                    ListItem::new(Text::fromString(' –ú—É–∂—Å–∫–æ–π')),
                                    ListItem::new(Text::fromString(' –ñ–µ–Ω—Å–∫–∏–π')),
                                )
                        ),
                    BlockWidget::default()
                        ->borders(Borders::ALL)
                        ->borderType(BorderType::Rounded)
                        ->titles(Title::fromString('–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å'))
                        ->widget(
                            GridWidget::default()
                                ->constraints(
                                    Constraint::min(1),
                                    Constraint::min(10),
                                )
                                ->widgets(
                                    ParagraphWidget::fromString('‚Æò ' . $this->getAbilityName() . ' ‚Æö'),
                                    ParagraphWidget::fromString($this->getAbilityDescription()),
                                )
                        ),
                    BlockWidget::default()
                        ->borders(Borders::ALL)
                        ->borderType(BorderType::Rounded)
                        ->titles(Title::fromString('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã'))
                    ->widget($this->getParamGrid())
                ),
                BlockWidget::default()
                    ->borders(Borders::ALL)
                    ->borderType(BorderType::Rounded)
                    ->titles(Title::fromString('–ü–æ—Ä—Ç—Ä–µ—Ç'))
                    ->widget(
                        ImageWidget::fromPath($this->getPortraitPath()),
                    ),
                GridWidget::default()
                ->direction(Direction::Vertical)
                ->constraints(
                    Constraint::percentage(90),
                    Constraint::max(3),
                )
                ->widgets(
                    BlockWidget::default()
                        ->borders(Borders::ALL)
                        ->borderType(BorderType::Rounded)
                        ->titles(Title::fromString('–û–ø–∏—Å–∞–Ω–∏–µ'))
                        ->widget(
                            ParagraphWidget::fromString($this->description)
                        ),
                    BlockWidget::default()->style(
                        Style::default()
                    )
                    ->borders(Borders::ALL)->borderType(BorderType::Rounded)
                    ->widget(
                        ParagraphWidget::fromString('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∏—Ä –∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É')->alignment(HorizontalAlignment::Center)
                    )
                ),
            )
        );
    }

    private function getParamGrid(): GridWidget
    {
        return GridWidget::default()
            ->constraints(
                Constraint::max(1),
                Constraint::max(1),
                Constraint::max(1),
                Constraint::max(1),
                Constraint::max(1),
                Constraint::max(1),
                Constraint::max(1),
                Constraint::max(1),
            )
            ->widgets(
            ParagraphWidget::fromString('–°–∏–ª–∞         ‚Æò 10 ‚Æö'),
            ParagraphWidget::fromString('–õ–æ–≤–∫–æ—Å—Ç—å     ‚Æò 10 ‚Æö'),
            ParagraphWidget::fromString('–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ ‚Æò 10 ‚Æö'),
            ParagraphWidget::fromString('–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç    ‚Æò 10 ‚Æö'),
            ParagraphWidget::fromString('–ú—É–¥—Ä–æ—Å—Ç—å     ‚Æò 10 ‚Æö'),
            ParagraphWidget::fromString('–•–∞—Ä–∏–∑–º–∞      ‚Æò 10 ‚Æö'),
            ParagraphWidget::fromString(''),
            ParagraphWidget::fromString('–ù–µ –∏c–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –æ—á–∫–æ–≤: 10'),
        );
    }
}
